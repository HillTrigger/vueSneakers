import winston from 'winston';

export const logger = winston.createLogger({
  // Уровень логирования, который будет записываться в лог.
  // "info" означает, что все сообщения уровня info и выше (warn, error) будут записываться.
  level: 'warn',

  // Транспорты - места, куда отправляются логи
  transports: [
    // Транспорт для вывода логов в консоль
    new winston.transports.Console({
      // Уровень логирования для этого транспорта. В данном случае "info"
      level: 'info',

      // Формат вывода логов для консоли
      format: winston.format.combine(
        // Добавление цвета для сообщений в консоль
        winston.format.colorize(),

        // Простой формат вывода, например: "info: сообщение"
        winston.format.simple()
      ),
    }),

    // Транспорт для записи логов в файл
    new winston.transports.File({
      // Путь к файлу, куда будут записываться логи
      filename: 'logs/combined.log',

      // Уровень логирования для этого файла. Здесь будет записываться всё, что не ниже уровня "info"
      level: 'info',

      // Формат логирования
      format: winston.format.combine(
        // Добавление временной метки к каждому сообщению
        winston.format.timestamp(),

        // Форматирование лога в JSON, это удобно для обработки логов в лог-агрегаторах
        winston.format.json()
      ),

      // Максимальный размер файла лога (в байтах). Когда размер файла превышает 1 МБ, происходит его ротация.
      maxsize: 1000000, // 1MB

      // Количество файлов, которые будут храниться в случае ротации.
      // Если количество файлов превышает это число, старые файлы будут удаляться.
      maxFiles: 5, // Хранить только 5 файлов логов

      // Если true, старые файлы логов будут сохраняться с номерами, например: `combined.log.1`, `combined.log.2` и т.д.
      tailable: false, // Включаем ротацию логов
    })
  ],

  // Включение или отключение завершения работы приложения при возникновении ошибки в логе
  // Если установлен в true, приложение завершится при записи ошибки в лог
  exitOnError: false // Не завершать приложение при записи ошибки в лог
});

